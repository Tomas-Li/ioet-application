Graphical interface:
	-File selection (more easier than working with the config file, in any case this could be keep as the default file to load)
	-Show results in something better than the console
    -As a built-in option tkinter is more than enough for this implementation.

More formats:
	-Add csv compatibility

Add a currency system (needs an API to be accurate):
	Partially implemented as this data is kept inside our containerPayments, but then no conversion is done. To implement it the step would be:
		-config file should ask for the final currency to convert to
		-use the locale built-in module to work with currencies formats
		-use an API to get accurate conversion data from one currency to another

No static tests:
	Using dummy data files and predefined variables to check for behaviours works to ensure that everything works, but is not ideal.
	Instead of using dummies predefined for reading and checking the data, a more intresting approach would be to define random values for the testings.
	For example using random and a list of names and numbers we could make a variable that represents the employees data, print it in a file, read it and check if the end results will be the correct

Extra:
    The built-in module datetime was considered as a way to work with containers keeping the data in intervals and not per hour. Using this module is useful in cases where the interval goes over 24h (for example from 22:00 â€“ 2:00) as the classes in this module will know how to work around this.
    Specifically we should work with timedelta instances as they allow us to do algebraic operations between dates, and the same is true for logical operators and this class.